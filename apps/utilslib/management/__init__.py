# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import DEFAULT_DB_ALIAS, router
from django.db.models import get_models, signals
from django.contrib.auth import models as auth_app
from django.contrib.auth.management import _check_permission_clashing


def _get_permission_codename(action, opts):
    return "%s_%s" % (action, opts.object_name.lower())


def _get_builtin_permissions(opts):
    """
    Returns the (codename, name) for all autogenerated permissions
    """
    perms = []
    # We have added the view permission to builtin permissions
    # as well as the regular add, change, delete.
    # The _check_permission_clashing() function will make sure there
    # are no duplicates being created.
    for action in ("view", "add", "change", "delete"):
        perms.append((_get_permission_codename(action, opts),
                      "Can %s %s" % (action, opts.verbose_name_raw)))
    return perms


def _get_all_permissions(opts, ctype):
    """
    Returns the (codename, name) for all permissions in the given opts
    """
    builtin = _get_builtin_permissions(opts)
    custom = list(opts.permissions)
    _check_permission_clashing(custom, builtin, ctype)
    return builtin + custom


def create_permissions(app, created_models, verbosity, db=DEFAULT_DB_ALIAS, **kwargs):
    """
    Create view permission for all models.
    See django.contrib.auth.management.__init__.py for original
    """
    if not router.allow_syncdb(db, auth_app.Permission):
        return

    from django.contrib.contenttypes.models import ContentType

    app_models = get_models(app)
    searched_perms = list()
    ctypes = set()
    for klass in app_models:
        ctype = ContentType.objects.db_manager(db).get_for_model(klass)
        ctypes.add(ctype)
        for perm in _get_all_permissions(klass._meta, ctype):
            searched_perms.append((ctype, perm))

    all_perms = set(auth_app.Permission.objects.using(db).filter(
        content_type__in=ctypes).values_list("content_type", "codename")
    )

    perms = [
        auth_app.Permission(codename=codename, name=name, content_type=ctype)
        for ctype, (codename, name) in searched_perms if (ctype.pk, codename) not in all_perms
    ]
    auth_app.Permission.objects.using(db).bulk_create(perms)
    if verbosity >= 2:
        for perm in perms:
            print "Adding permission '%s'" % perm


signals.post_syncdb.connect(create_permissions, dispatch_uid="moota_tastypie.management.create_permissions")
